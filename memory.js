// Generated by CoffeeScript 1.6.3
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  window.Game = (function() {
    var Game, nextFib, start;
    start = function(height) {
      var game, width;
      width = nextFib(height);
      return game = new Game(parseInt(width), parseInt(height));
    };
    nextFib = function(number) {
      var fibs, n;
      n = 1;
      fibs = [1, 1];
      while (number >= fibs[n]) {
        fibs.push(fibs[n] + fibs[n - 1]);
        n += 1;
      }
      return fibs[n];
    };
    Game = (function() {
      function Game(width, height) {
        this.width = width;
        this.height = height;
        this.trial = 1;
        this.cellCount = (this.height - 2) || 1;
        this.populateGrid();
        this.go();
      }

      Game.prototype.populateGrid = function() {
        var i, j, _i, _ref, _results;
        window.less.modifyVars({
          "@grid-width": "" + (this.width * 40) + "px",
          "@grid-height": "" + (this.height * 40) + "px"
        });
        $("#grid").html("");
        _results = [];
        for (i = _i = 0, _ref = this.width; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          _results.push((function() {
            var _j, _ref1, _results1;
            _results1 = [];
            for (j = _j = 0, _ref1 = this.height; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
              _results1.push($("#grid").append("<div class='cell' id='r" + i + "c" + j + "'</div>"));
            }
            return _results1;
          }).call(this));
        }
        return _results;
      };

      Game.prototype.go = function() {
        var current, that;
        this.correctCount = 0;
        this.passive = 1000 + 100 * this.cellCount;
        this.active = 3000 + 1000 * this.cellCount;
        $(".cell").removeClass("chosen");
        this.disableMouse();
        this.pickCells();
        this.lightCells(true);
        that = this;
        current = this.trial;
        return setTimeout((function() {
          that.lightCells(false);
          that.enableMouse();
          return setTimeout((function() {
            return that.respond(false, current);
          }), that.active);
        }), this.passive);
      };

      Game.prototype.disableMouse = function() {
        return $(".cell").off("click");
      };

      Game.prototype.enableMouse = function() {
        var that;
        that = this;
        return $(".cell").on("click", function(event) {
          var _ref;
          if (_ref = $(this).attr("id"), __indexOf.call(that.cells, _ref) >= 0) {
            $(this).addClass("chosen");
            that.correctCount += 1;
            if (that.correctCount === that.cellCount) {
              return that.respond(true);
            }
          } else {
            return that.respond(false);
          }
        });
      };

      Game.prototype.pickCells = function() {
        var cell, i, _i, _ref, _results;
        this.cells = [];
        _results = [];
        for (i = _i = 0, _ref = this.cellCount; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          cell = this.pickCell();
          _results.push(this.cells.push(cell));
        }
        return _results;
      };

      Game.prototype.pickCell = function() {
        var cell, x, y;
        while ((cell == null) || __indexOf.call(this.cells, cell) >= 0) {
          x = Math.floor(Math.random() * this.width);
          y = Math.floor(Math.random() * this.height);
          cell = "r" + x + "c" + y;
        }
        return cell;
      };

      Game.prototype.lightCells = function(bool) {
        var cell, _i, _len, _ref, _results;
        _ref = this.cells;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          cell = _ref[_i];
          _results.push($("#" + cell).toggleClass("chosen", bool));
        }
        return _results;
      };

      Game.prototype.respond = function(succeeded, trial) {
        var that, _ref;
        if (arguments.length === 1 || trial === this.trial) {
          this.flash(succeeded);
          if (succeeded) {
            $("#max").html(this.cellCount);
            $("#score").html(this.cellCount + parseInt($("#score").html()));
            if (this.cellCount >= this.width) {
              this.cellCount = this.height;
              _ref = [this.width, nextFib(this.width)], this.height = _ref[0], this.width = _ref[1];
              this.populateGrid();
            } else {
              this.cellCount += 1;
            }
          } else {
            this.lightCells(true);
          }
          that = this;
          this.trial += 1;
          return setTimeout((function() {
            return that.go();
          }), 400);
        }
      };

      Game.prototype.flash = function(succeeded) {
        var message;
        if (succeeded) {
          message = "Nice!";
        } else {
          message = "Try Again!";
        }
        $("h2").html("" + message);
        return setTimeout((function() {
          return $("h2").html("");
        }), 400);
      };

      return Game;

    })();
    return {
      start: start
    };
  })();

}).call(this);

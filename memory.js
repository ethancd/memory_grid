// Generated by CoffeeScript 1.6.3
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  window.Program = (function() {
    var Game, start;
    start = function() {
      var game;
      return game = new Game(5, 3);
    };
    Game = (function() {
      function Game(width, height) {
        this.width = width;
        this.height = height;
        this.trial = 1;
        this.cellCount = (this.height - 2) || 1;
        this.populateGrid();
        this.go();
      }

      Game.prototype.populateGrid = function() {
        var i, j, _i, _ref, _results;
        $("#grid").css({
          "width": "" + (this.width * 50) + "px",
          "height": "" + (this.height * 50) + "px"
        });
        $("header").css({
          "width": "" + (this.width * 50 + 300) + "px"
        });
        $("#grid").html("");
        _results = [];
        for (i = _i = 0, _ref = this.width; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          _results.push((function() {
            var _j, _ref1, _results1;
            _results1 = [];
            for (j = _j = 0, _ref1 = this.height; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
              _results1.push($("#grid").append("<div class='cell' id='r" + i + "c" + j + "'></div>"));
            }
            return _results1;
          }).call(this));
        }
        return _results;
      };

      Game.prototype.go = function() {
        var current,
          _this = this;
        this.correctCount = 0;
        this.passive = 1000 + 100 * this.cellCount;
        this.active = 500 * this.width + 500 * this.cellCount;
        this.remaining = this.active / 100;
        $("time#remaining").html((this.remaining / 10).toFixed(1) + " s");
        $("#timer").css("color", "#000");
        $(".cell").removeClass("chosen");
        this.disableMouse();
        this.pickCells();
        this.lightCells(true);
        current = this.trial;
        return setTimeout((function() {
          _this.lightCells(false);
          _this.enableMouse();
          _this.timer = setInterval((function() {
            _this.remaining -= 1;
            console.log(_this.remaining);
            $("time#remaining").html((_this.remaining / 10).toFixed(1) + " s");
            if (_this.remaining <= 10) {
              return $("#timer").css("color", "#c00");
            }
          }), 100);
          return setTimeout((function() {
            return _this.respond(false, current);
          }), _this.active + 50);
        }), this.passive);
      };

      Game.prototype.disableMouse = function() {
        return $(".cell").off("click");
      };

      Game.prototype.enableMouse = function() {
        var t;
        t = this;
        return $(".cell").on("click", function(event) {
          var _ref;
          if (!$(this).hasClass("chosen")) {
            if (_ref = $(this).attr("id"), __indexOf.call(t.cells, _ref) >= 0) {
              $(this).addClass("chosen");
              t.correctCount += 1;
              if (t.correctCount === t.cellCount) {
                return t.respond(true);
              }
            } else {
              return t.respond(false);
            }
          }
        });
      };

      Game.prototype.pickCells = function() {
        var cell, i, _i, _ref, _results;
        this.cells = [];
        _results = [];
        for (i = _i = 0, _ref = this.cellCount; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          cell = this.pickCell();
          _results.push(this.cells.push(cell));
        }
        return _results;
      };

      Game.prototype.pickCell = function() {
        var cell, x, y;
        while ((cell == null) || __indexOf.call(this.cells, cell) >= 0) {
          x = Math.floor(Math.random() * this.width);
          y = Math.floor(Math.random() * this.height);
          cell = "r" + x + "c" + y;
        }
        return cell;
      };

      Game.prototype.lightCells = function(bool) {
        var cell, _i, _len, _ref, _results;
        _ref = this.cells;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          cell = _ref[_i];
          _results.push($("#" + cell).toggleClass("chosen", bool));
        }
        return _results;
      };

      Game.prototype.respond = function(succeeded, trial) {
        var bonus,
          _this = this;
        if (arguments.length === 1 || trial === this.trial) {
          if (arguments.length === 2) {
            $("time#remaining").html("0.0 s");
          }
          this.flash(succeeded);
          clearInterval(this.timer);
          if (succeeded) {
            if (this.cellCount > parseInt($("#max").html())) {
              $("#max").html(this.cellCount);
            }
            bonus = 10 * this.height * (this.cellCount + (Math.ceil(this.remaining * 10) / 10));
            $("#score").html(bonus + parseInt($("#score").html()));
            if (this.cellCount > (this.width * this.height / 4)) {
              this.cellCount = this.width;
              this.height += 1;
              this.width = Math.floor(this.height * 1.6);
              $("#success strong").html("Level Up!");
              setTimeout((function() {
                return _this.populateGrid();
              }), 1000);
            } else {
              this.cellCount += 1;
            }
          } else {
            this.lightCells(true);
          }
          this.trial += 1;
          return setTimeout((function() {
            return _this.go();
          }), 1000);
        }
      };

      Game.prototype.flash = function(succeeded) {
        var message;
        if (succeeded) {
          message = "Nice!";
          $("#timer").css("color", "#090");
        } else {
          message = "Try Again!";
          $("#timer").css("color", "#c00");
        }
        $("#success strong").addClass("" + succeeded).html("" + message);
        return setTimeout((function() {
          return $("#success strong").removeClass("" + succeeded).html("");
        }), 1000);
      };

      return Game;

    })();
    return {
      start: start
    };
  })();

}).call(this);
